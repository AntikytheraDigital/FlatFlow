import Head from "next/head";
import { api } from "@/utils/api";
import {
  SignInButton,
  SignOutButton,
  SignedIn,
  SignedOut,
  useUser,
} from "@clerk/nextjs";
import { LoadingPage, LoadingSpinner } from "@/components/loading";
import { useState } from "react";

const CreateFlat = () => {
  const { user } = useUser();

  //const ctx = api.useContext();

  const { mutate, isLoading: isCreating } = api.flat.createFlat.useMutation({
    onSuccess: () => {
      console.log("success");
    },
    onError: (error) => {
      console.log(error);
    },
  });

  const handleCreateFlat = () => {
    mutate();
  };

  if (!user) return null;

  return (
    <button onClick={handleCreateFlat} disabled={isCreating}>
      {isCreating ? <LoadingSpinner size={20} /> : "Create Flat"}
    </button>
  );
};

/**
 * Test code for joining flat. Needs to be removed.
 */
const JoinFlat = () => {
  const { user } = useUser();
  const [flatId, setFlatId] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  const { mutate, isLoading: isJoining } =
    api.flat.addUserToUserFlat.useMutation({
      onSuccess: (flat) => {
        setSuccessMessage(`Successfully joined flat: ${flat.id}`);
        setFlatId("");
      },
      onError: (error) => {
        console.log(error);
      },
    });

  const handleJoinFlat = (event: { preventDefault: () => void }) => {
    event.preventDefault();

    if (!user) return;
    if (!flatId) return;

    mutate({ id: String(flatId) });
  };

  return (
    <div>
      <form onSubmit={handleJoinFlat} className="flex items-center space-x-2">
        <input
          type="text"
          placeholder="Flat ID"
          value={flatId}
          onChange={(event) => setFlatId(event.target.value)}
          disabled={isJoining}
          className="border-b border-gray-500 bg-transparent focus:outline-none"
        />
        <button type="submit" disabled={isJoining} className="bg-transparent">
          {isJoining ? <LoadingSpinner size={20} /> : "Join Flat"}
        </button>
      </form>
      {successMessage && <p>{successMessage}</p>}
    </div>
  );
};

export default function Home() {
  const { isLoaded: userIsLoaded, isSignedIn } = useUser();

  if (!userIsLoaded) return <LoadingPage />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center">
        <div>
          <SignedIn>
            <SignOutButton />
            <div>
              <CreateFlat />
            </div>
            <div>
              <JoinFlat />
            </div>
          </SignedIn>
          <SignedOut>
            <SignInButton />
          </SignedOut>
        </div>
      </main>
    </>
  );
}
